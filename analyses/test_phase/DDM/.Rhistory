#also correlate freq judgement with post-scan lifetime (useful in determining whether to model them in the same GLM)
corr_freqpost=corr.test(as.numeric(data_freq.match$Response),as.numeric(data_postscan$Response),method="pearson")
freqpost_frame$SSID[i]=ss_list[i]
freqpost_frame$task[i]="freq_and_postscan"
freqpost_frame$pearson_R[i]=corr_freqpost[1]
#and the correlation between normfam and objective frequency
corr_normobjfreq=corr.test(as.numeric(data_postscan$objective_freq),as.numeric(data_postscan$norm_fam),method="pearson")
normobjfreq_frame$SSID[i]=ss_list[i]
normobjfreq_frame$task[i]="N/A"
normobjfreq_frame$pearson_R[i]=corr_normobjfreq[1]
#aaaaand the correlation between frequency response and normfam
corr_freqnorm=corr.test(as.numeric(data_freq$norm_fam),as.numeric(data_freq$Response),method="pearson")
freqnorm_frame$SSID[i]=ss_list[i]
freqnorm_frame$task[i]="freq"
freqnorm_frame$pearson_R[i]=corr_freqnorm[1]
#AAAAAAAND the correlation between postscan judgement and objective frequency (should be nonsignificant if they are doing the task)
corr_objfreqpostscan=corr.test(as.numeric(data_postscan$objective_freq),as.numeric(data_postscan$Response),method="pearson")
objfreqpostscan_frame$SSID[i]=ss_list[i]
objfreqpostscan_frame$task[i]="postscan"
objfreqpostscan_frame$pearson_R[i]=corr_objfreqpostscan[1]
}
View(data_freq_all)
View(freqRTavg)
freqRTavg$resp[(25*(i-1)+1):(25*i)]=seq(1,5,1)
?rep
rep(1:5,each=5)
rep(1:9:2,5)
rep(1:2:9,5)
rep(seq(from=1,to=9,by=2),5)
View(freqRTavg)
#correlate frequency judgement with actual presentation frequency, and lifetime fam judgement with normative data.
#using results from my ERP study as background to judge the data quality of the fMRI study.
datapath="C:\\Users\\haozi\\Desktop\\PhD\\fMRI_PrC-PPC_data\\"
library(psych)
library(readxl)
background_ERP=read_excel(paste(datapath,"resource from ERP study\\only_Pearson_R.xlsx",sep=""), sheet = "transposed")
ss_list=c('001','002','003','004','005','006','007','008','010','011','012','013','014','015','016','017','018','019','020','021','022','023','024','095','026','027','028','029','030','031','032')
#ss_list=c('001','002','003','004','005','006','007','008','011','013','014','016','020','021','022','095','026')
#create empty dataframes to store the correlation values
freq_frame=data.frame(matrix(ncol = 3, nrow = length(ss_list)))
x <- c("pearson_R","SSID","task")
colnames(freq_frame) <- x
fam_frame=freq_frame
postscan_frame=freq_frame
freqpost_frame=freq_frame
normobjfreq_frame=freq_frame
freqnorm_frame=freq_frame
objfreqpostscan_frame=freq_frame
#create empty frame to store response counts in each task
trialcount_frame=data.frame(matrix(ncol=16,nrow=length(ss_list)))
x=c("SSID","freq1_count","freq2_count","freq3_count","freq4_count","freq5_count","fam1_count","fam2_count","fam3_count","fam4_count","fam5_count","pscan1_count","pscan2_count","pscan3_count","pscan4_count","pscan5_count")
colnames(trialcount_frame)=x
#creat empty dataframes to store the mean resp for each level of freq and fam for each ss
freqavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_resp","SSID","obj_freq")
colnames(freqavg)=x
famavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_resp","SSID","norm_fam")
colnames(famavg)=x
postscanavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_resp","SSID","norm_fam")
colnames(postscanavg)=x
#create empty dataframes to store the mean RT for each judgement
freqRTavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_RT","SSID","resp")
colnames(freqRTavg)=x
famRTavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_RT","SSID","resp")
colnames(famRTavg)=x
#empty frame to store all frequency data
data_freq_all=data.frame()
library(gtools)
#load data, calculate correlation and mean resp for each level of freq and fam in a for-loop
for (i in c(1:length(ss_list))){
data_dir=paste(datapath,"behavioral\\sub-",ss_list[i],sep="")
data_file=list.files(data_dir,pattern=paste("^",ss_list[i],"_startphase*",sep=""))
data=read_excel(paste(data_dir,"\\",data_file,sep=""))
#remove rows with all NAs but two columns
data=data[rowSums(is.na(data)) != ncol(data)-2, ]
#extract testphase data
data_freq=data[data$task=="recent",]
data_fam=data[data$task=="lifetime",]
data_postscan=data[data$task=="post_scan",]
#store freq data for DDM
data_freq_all=rbind(data_freq_all,data_freq)
#calculate normfam for frequency items to be compared with post_scan response
data_freq.match=data_freq[match(data_postscan$Stimuli,data_freq$Stimuli),]#match item order
data_postscan$norm_fam=data_freq.match$norm_fam
data_postscan$objective_freq=data_freq.match$objective_freq
norm_fam_freq_qt=quantcut(data_postscan$norm_fam,q=5,labels=FALSE)
data_postscan$norm_fam_qt=norm_fam_freq_qt
#cut the normative fam ratings into 5 levels
norm_fam_qt=quantcut(data_fam$norm_fam,q=5,labels=FALSE)
data_fam$norm_fam_qt=norm_fam_qt
#average
freqavg$SSID[(5*(i-1)+1):(5*i)]=ss_list[i]
freqavg$obj_freq[(5*(i-1)+1):(5*i)]=seq(1,9,2)
#each level
freqavg$mean_resp[5*(i-1)+1]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==1]),na.rm=TRUE)
freqavg$mean_resp[5*(i-1)+2]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==3]),na.rm=TRUE)
freqavg$mean_resp[5*(i-1)+3]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==5]),na.rm=TRUE)
freqavg$mean_resp[5*(i-1)+4]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==7]),na.rm=TRUE)
freqavg$mean_resp[5*(i-1)+5]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==9]),na.rm=TRUE)
famavg$SSID[(5*(i-1)+1):(5*i)]=ss_list[i]
famavg$norm_fam[(5*(i-1)+1):(5*i)]=c(1:5)
#each level
famavg$mean_resp[5*(i-1)+1]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==1]),na.rm=TRUE)
famavg$mean_resp[5*(i-1)+2]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==2]),na.rm=TRUE)
famavg$mean_resp[5*(i-1)+3]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==3]),na.rm=TRUE)
famavg$mean_resp[5*(i-1)+4]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==4]),na.rm=TRUE)
famavg$mean_resp[5*(i-1)+5]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==5]),na.rm=TRUE)
postscanavg$SSID[(5*(i-1)+1):(5*i)]=ss_list[i]
postscanavg$norm_fam[(5*(i-1)+1):(5*i)]=c(1:5)
#each level
postscanavg$mean_resp[5*(i-1)+1]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==1]),na.rm=TRUE)
postscanavg$mean_resp[5*(i-1)+2]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==2]),na.rm=TRUE)
postscanavg$mean_resp[5*(i-1)+3]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==3]),na.rm=TRUE)
postscanavg$mean_resp[5*(i-1)+4]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==4]),na.rm=TRUE)
postscanavg$mean_resp[5*(i-1)+5]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==5]),na.rm=TRUE)
#RT average
freqRTavg$SSID[(25*(i-1)+1):(25*i)]=ss_list[i]
freqRTavg$resp[(25*(i-1)+1):(25*i)]=rep(1:5,each=5)
freqRTavg$obj_freq[(25*(i-1)+1):(25*i)]=rep(seq(from=1,to=9,by=2),5)
#each level of resp and obj_freq
# freqRTavg$mean_RT[5*(i-1)+1]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1]),na.rm=TRUE)
# freqRTavg$mean_RT[5*(i-1)+2]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2]),na.rm=TRUE)
# freqRTavg$mean_RT[5*(i-1)+3]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3]),na.rm=TRUE)
# freqRTavg$mean_RT[5*(i-1)+4]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4]),na.rm=TRUE)
# freqRTavg$mean_RT[5*(i-1)+5]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5]),na.rm=TRUE)
#resp=1
freqRTavg$mean_RT[25*(i-1)+1]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+2]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+3]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+4]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+5]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==9]),na.rm=TRUE)
#resp=2
freqRTavg$mean_RT[25*(i-1)+6]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+7]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+8]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+9]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+10]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==9]),na.rm=TRUE)
#resp=3
freqRTavg$mean_RT[25*(i-1)+11]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+12]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+13]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+14]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+15]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==9]),na.rm=TRUE)
#resp=4
freqRTavg$mean_RT[25*(i-1)+16]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+17]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+18]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+19]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+20]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==9]),na.rm=TRUE)
#resp=5
freqRTavg$mean_RT[25*(i-1)+21]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+22]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+23]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+24]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+25]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==9]),na.rm=TRUE)
famRTavg$SSID[(5*(i-1)+1):(5*i)]=ss_list[i]
famRTavg$resp[(5*(i-1)+1):(5*i)]=seq(1,5,1)
#each level of resp
famRTavg$mean_RT[5*(i-1)+1]=mean(as.numeric(data_fam$RespTime[data_fam$Response==1]),na.rm=TRUE)
famRTavg$mean_RT[5*(i-1)+2]=mean(as.numeric(data_fam$RespTime[data_fam$Response==2]),na.rm=TRUE)
famRTavg$mean_RT[5*(i-1)+3]=mean(as.numeric(data_fam$RespTime[data_fam$Response==3]),na.rm=TRUE)
famRTavg$mean_RT[5*(i-1)+4]=mean(as.numeric(data_fam$RespTime[data_fam$Response==4]),na.rm=TRUE)
famRTavg$mean_RT[5*(i-1)+5]=mean(as.numeric(data_fam$RespTime[data_fam$Response==5]),na.rm=TRUE)
##########################trial counts/scale usage#####################
trialcount_frame$freq1_count[i]=sum(as.numeric(data_freq$Response)==1,na.rm = TRUE)
trialcount_frame$freq2_count[i]=sum(as.numeric(data_freq$Response)==2,na.rm = TRUE)
trialcount_frame$freq3_count[i]=sum(as.numeric(data_freq$Response)==3,na.rm = TRUE)
trialcount_frame$freq4_count[i]=sum(as.numeric(data_freq$Response)==4,na.rm = TRUE)
trialcount_frame$freq5_count[i]=sum(as.numeric(data_freq$Response)==5,na.rm = TRUE)
trialcount_frame$fam1_count[i]=sum(as.numeric(data_fam$Response)==1,na.rm = TRUE)
trialcount_frame$fam2_count[i]=sum(as.numeric(data_fam$Response)==2,na.rm = TRUE)
trialcount_frame$fam3_count[i]=sum(as.numeric(data_fam$Response)==3,na.rm = TRUE)
trialcount_frame$fam4_count[i]=sum(as.numeric(data_fam$Response)==4,na.rm = TRUE)
trialcount_frame$fam5_count[i]=sum(as.numeric(data_fam$Response)==5,na.rm = TRUE)
trialcount_frame$pscan1_count[i]=sum(as.numeric(data_postscan$Response)==1,na.rm = TRUE)
trialcount_frame$pscan2_count[i]=sum(as.numeric(data_postscan$Response)==2,na.rm = TRUE)
trialcount_frame$pscan3_count[i]=sum(as.numeric(data_postscan$Response)==3,na.rm = TRUE)
trialcount_frame$pscan4_count[i]=sum(as.numeric(data_postscan$Response)==4,na.rm = TRUE)
trialcount_frame$pscan5_count[i]=sum(as.numeric(data_postscan$Response)==5,na.rm = TRUE)
trialcount_frame$SSID[i]=ss_list[i]
##############################correlation#####################
corr_freq=corr.test(as.numeric(data_freq$Response),data_freq$objective_freq,method="pearson")
freq_frame$SSID[i]=ss_list[i]
freq_frame$task[i]="recent"
freq_frame$pearson_R[i]=corr_freq[1]
corr_fam=corr.test(as.numeric(data_fam$Response),data_fam$norm_fam,method="pearson")
fam_frame$SSID[i]=ss_list[i]
fam_frame$task[i]="lifetime"
fam_frame$pearson_R[i]=corr_fam[1]
corr_postscan=corr.test(as.numeric(data_postscan$Response),data_postscan$norm_fam,method="pearson")
postscan_frame$SSID[i]=ss_list[i]
postscan_frame$task[i]="post_scan"
postscan_frame$pearson_R[i]=corr_postscan[1]
#also correlate freq judgement with post-scan lifetime (useful in determining whether to model them in the same GLM)
corr_freqpost=corr.test(as.numeric(data_freq.match$Response),as.numeric(data_postscan$Response),method="pearson")
freqpost_frame$SSID[i]=ss_list[i]
freqpost_frame$task[i]="freq_and_postscan"
freqpost_frame$pearson_R[i]=corr_freqpost[1]
#and the correlation between normfam and objective frequency
corr_normobjfreq=corr.test(as.numeric(data_postscan$objective_freq),as.numeric(data_postscan$norm_fam),method="pearson")
normobjfreq_frame$SSID[i]=ss_list[i]
normobjfreq_frame$task[i]="N/A"
normobjfreq_frame$pearson_R[i]=corr_normobjfreq[1]
#aaaaand the correlation between frequency response and normfam
corr_freqnorm=corr.test(as.numeric(data_freq$norm_fam),as.numeric(data_freq$Response),method="pearson")
freqnorm_frame$SSID[i]=ss_list[i]
freqnorm_frame$task[i]="freq"
freqnorm_frame$pearson_R[i]=corr_freqnorm[1]
#AAAAAAAND the correlation between postscan judgement and objective frequency (should be nonsignificant if they are doing the task)
corr_objfreqpostscan=corr.test(as.numeric(data_postscan$objective_freq),as.numeric(data_postscan$Response),method="pearson")
objfreqpostscan_frame$SSID[i]=ss_list[i]
objfreqpostscan_frame$task[i]="postscan"
objfreqpostscan_frame$pearson_R[i]=corr_objfreqpostscan[1]
}
#correlate frequency judgement with actual presentation frequency, and lifetime fam judgement with normative data.
#using results from my ERP study as background to judge the data quality of the fMRI study.
datapath="C:\\Users\\haozi\\Desktop\\PhD\\fMRI_PrC-PPC_data\\"
library(psych)
library(readxl)
background_ERP=read_excel(paste(datapath,"resource from ERP study\\only_Pearson_R.xlsx",sep=""), sheet = "transposed")
ss_list=c('001','002','003','004','005','006','007','008','010','011','012','013','014','015','016','017','018','019','020','021','022','023','024','095','026','027','028','029','030','031','032')
#ss_list=c('001','002','003','004','005','006','007','008','011','013','014','016','020','021','022','095','026')
#create empty dataframes to store the correlation values
freq_frame=data.frame(matrix(ncol = 3, nrow = length(ss_list)))
x <- c("pearson_R","SSID","task")
colnames(freq_frame) <- x
fam_frame=freq_frame
postscan_frame=freq_frame
freqpost_frame=freq_frame
normobjfreq_frame=freq_frame
freqnorm_frame=freq_frame
objfreqpostscan_frame=freq_frame
#create empty frame to store response counts in each task
trialcount_frame=data.frame(matrix(ncol=16,nrow=length(ss_list)))
x=c("SSID","freq1_count","freq2_count","freq3_count","freq4_count","freq5_count","fam1_count","fam2_count","fam3_count","fam4_count","fam5_count","pscan1_count","pscan2_count","pscan3_count","pscan4_count","pscan5_count")
colnames(trialcount_frame)=x
#creat empty dataframes to store the mean resp for each level of freq and fam for each ss
freqavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_resp","SSID","obj_freq")
colnames(freqavg)=x
famavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_resp","SSID","norm_fam")
colnames(famavg)=x
postscanavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_resp","SSID","norm_fam")
colnames(postscanavg)=x
#create empty dataframes to store the mean RT for each judgement
freqRTavg=data.frame(matrix(ncol=4,nrow=length(ss_list)*25))
x=c("mean_RT","SSID","resp","obj_freq")
colnames(freqRTavg)=x
famRTavg=data.frame(matrix(ncol=3,nrow=length(ss_list)*5))
x=c("mean_RT","SSID","resp")
colnames(famRTavg)=x
#empty frame to store all frequency data
data_freq_all=data.frame()
library(gtools)
#load data, calculate correlation and mean resp for each level of freq and fam in a for-loop
for (i in c(1:length(ss_list))){
data_dir=paste(datapath,"behavioral\\sub-",ss_list[i],sep="")
data_file=list.files(data_dir,pattern=paste("^",ss_list[i],"_startphase*",sep=""))
data=read_excel(paste(data_dir,"\\",data_file,sep=""))
#remove rows with all NAs but two columns
data=data[rowSums(is.na(data)) != ncol(data)-2, ]
#extract testphase data
data_freq=data[data$task=="recent",]
data_fam=data[data$task=="lifetime",]
data_postscan=data[data$task=="post_scan",]
#store freq data for DDM
data_freq_all=rbind(data_freq_all,data_freq)
#calculate normfam for frequency items to be compared with post_scan response
data_freq.match=data_freq[match(data_postscan$Stimuli,data_freq$Stimuli),]#match item order
data_postscan$norm_fam=data_freq.match$norm_fam
data_postscan$objective_freq=data_freq.match$objective_freq
norm_fam_freq_qt=quantcut(data_postscan$norm_fam,q=5,labels=FALSE)
data_postscan$norm_fam_qt=norm_fam_freq_qt
#cut the normative fam ratings into 5 levels
norm_fam_qt=quantcut(data_fam$norm_fam,q=5,labels=FALSE)
data_fam$norm_fam_qt=norm_fam_qt
#average
freqavg$SSID[(5*(i-1)+1):(5*i)]=ss_list[i]
freqavg$obj_freq[(5*(i-1)+1):(5*i)]=seq(1,9,2)
#each level
freqavg$mean_resp[5*(i-1)+1]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==1]),na.rm=TRUE)
freqavg$mean_resp[5*(i-1)+2]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==3]),na.rm=TRUE)
freqavg$mean_resp[5*(i-1)+3]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==5]),na.rm=TRUE)
freqavg$mean_resp[5*(i-1)+4]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==7]),na.rm=TRUE)
freqavg$mean_resp[5*(i-1)+5]=mean(as.numeric(data_freq$Response[data_freq$objective_freq==9]),na.rm=TRUE)
famavg$SSID[(5*(i-1)+1):(5*i)]=ss_list[i]
famavg$norm_fam[(5*(i-1)+1):(5*i)]=c(1:5)
#each level
famavg$mean_resp[5*(i-1)+1]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==1]),na.rm=TRUE)
famavg$mean_resp[5*(i-1)+2]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==2]),na.rm=TRUE)
famavg$mean_resp[5*(i-1)+3]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==3]),na.rm=TRUE)
famavg$mean_resp[5*(i-1)+4]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==4]),na.rm=TRUE)
famavg$mean_resp[5*(i-1)+5]=mean(as.numeric(data_fam$Response[data_fam$norm_fam_qt==5]),na.rm=TRUE)
postscanavg$SSID[(5*(i-1)+1):(5*i)]=ss_list[i]
postscanavg$norm_fam[(5*(i-1)+1):(5*i)]=c(1:5)
#each level
postscanavg$mean_resp[5*(i-1)+1]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==1]),na.rm=TRUE)
postscanavg$mean_resp[5*(i-1)+2]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==2]),na.rm=TRUE)
postscanavg$mean_resp[5*(i-1)+3]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==3]),na.rm=TRUE)
postscanavg$mean_resp[5*(i-1)+4]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==4]),na.rm=TRUE)
postscanavg$mean_resp[5*(i-1)+5]=mean(as.numeric(data_postscan$Response[data_postscan$norm_fam_qt==5]),na.rm=TRUE)
#RT average
freqRTavg$SSID[(25*(i-1)+1):(25*i)]=ss_list[i]
freqRTavg$resp[(25*(i-1)+1):(25*i)]=rep(1:5,each=5)
freqRTavg$obj_freq[(25*(i-1)+1):(25*i)]=rep(seq(from=1,to=9,by=2),5)
#each level of resp and obj_freq
# freqRTavg$mean_RT[5*(i-1)+1]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1]),na.rm=TRUE)
# freqRTavg$mean_RT[5*(i-1)+2]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2]),na.rm=TRUE)
# freqRTavg$mean_RT[5*(i-1)+3]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3]),na.rm=TRUE)
# freqRTavg$mean_RT[5*(i-1)+4]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4]),na.rm=TRUE)
# freqRTavg$mean_RT[5*(i-1)+5]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5]),na.rm=TRUE)
#resp=1
freqRTavg$mean_RT[25*(i-1)+1]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+2]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+3]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+4]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+5]=mean(as.numeric(data_freq$RespTime[data_freq$Response==1&data_freq$objective_freq==9]),na.rm=TRUE)
#resp=2
freqRTavg$mean_RT[25*(i-1)+6]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+7]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+8]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+9]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+10]=mean(as.numeric(data_freq$RespTime[data_freq$Response==2&data_freq$objective_freq==9]),na.rm=TRUE)
#resp=3
freqRTavg$mean_RT[25*(i-1)+11]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+12]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+13]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+14]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+15]=mean(as.numeric(data_freq$RespTime[data_freq$Response==3&data_freq$objective_freq==9]),na.rm=TRUE)
#resp=4
freqRTavg$mean_RT[25*(i-1)+16]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+17]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+18]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+19]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+20]=mean(as.numeric(data_freq$RespTime[data_freq$Response==4&data_freq$objective_freq==9]),na.rm=TRUE)
#resp=5
freqRTavg$mean_RT[25*(i-1)+21]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==1]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+22]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==3]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+23]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==5]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+24]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==7]),na.rm=TRUE)
freqRTavg$mean_RT[25*(i-1)+25]=mean(as.numeric(data_freq$RespTime[data_freq$Response==5&data_freq$objective_freq==9]),na.rm=TRUE)
famRTavg$SSID[(5*(i-1)+1):(5*i)]=ss_list[i]
famRTavg$resp[(5*(i-1)+1):(5*i)]=seq(1,5,1)
#each level of resp
famRTavg$mean_RT[5*(i-1)+1]=mean(as.numeric(data_fam$RespTime[data_fam$Response==1]),na.rm=TRUE)
famRTavg$mean_RT[5*(i-1)+2]=mean(as.numeric(data_fam$RespTime[data_fam$Response==2]),na.rm=TRUE)
famRTavg$mean_RT[5*(i-1)+3]=mean(as.numeric(data_fam$RespTime[data_fam$Response==3]),na.rm=TRUE)
famRTavg$mean_RT[5*(i-1)+4]=mean(as.numeric(data_fam$RespTime[data_fam$Response==4]),na.rm=TRUE)
famRTavg$mean_RT[5*(i-1)+5]=mean(as.numeric(data_fam$RespTime[data_fam$Response==5]),na.rm=TRUE)
##########################trial counts/scale usage#####################
trialcount_frame$freq1_count[i]=sum(as.numeric(data_freq$Response)==1,na.rm = TRUE)
trialcount_frame$freq2_count[i]=sum(as.numeric(data_freq$Response)==2,na.rm = TRUE)
trialcount_frame$freq3_count[i]=sum(as.numeric(data_freq$Response)==3,na.rm = TRUE)
trialcount_frame$freq4_count[i]=sum(as.numeric(data_freq$Response)==4,na.rm = TRUE)
trialcount_frame$freq5_count[i]=sum(as.numeric(data_freq$Response)==5,na.rm = TRUE)
trialcount_frame$fam1_count[i]=sum(as.numeric(data_fam$Response)==1,na.rm = TRUE)
trialcount_frame$fam2_count[i]=sum(as.numeric(data_fam$Response)==2,na.rm = TRUE)
trialcount_frame$fam3_count[i]=sum(as.numeric(data_fam$Response)==3,na.rm = TRUE)
trialcount_frame$fam4_count[i]=sum(as.numeric(data_fam$Response)==4,na.rm = TRUE)
trialcount_frame$fam5_count[i]=sum(as.numeric(data_fam$Response)==5,na.rm = TRUE)
trialcount_frame$pscan1_count[i]=sum(as.numeric(data_postscan$Response)==1,na.rm = TRUE)
trialcount_frame$pscan2_count[i]=sum(as.numeric(data_postscan$Response)==2,na.rm = TRUE)
trialcount_frame$pscan3_count[i]=sum(as.numeric(data_postscan$Response)==3,na.rm = TRUE)
trialcount_frame$pscan4_count[i]=sum(as.numeric(data_postscan$Response)==4,na.rm = TRUE)
trialcount_frame$pscan5_count[i]=sum(as.numeric(data_postscan$Response)==5,na.rm = TRUE)
trialcount_frame$SSID[i]=ss_list[i]
##############################correlation#####################
corr_freq=corr.test(as.numeric(data_freq$Response),data_freq$objective_freq,method="pearson")
freq_frame$SSID[i]=ss_list[i]
freq_frame$task[i]="recent"
freq_frame$pearson_R[i]=corr_freq[1]
corr_fam=corr.test(as.numeric(data_fam$Response),data_fam$norm_fam,method="pearson")
fam_frame$SSID[i]=ss_list[i]
fam_frame$task[i]="lifetime"
fam_frame$pearson_R[i]=corr_fam[1]
corr_postscan=corr.test(as.numeric(data_postscan$Response),data_postscan$norm_fam,method="pearson")
postscan_frame$SSID[i]=ss_list[i]
postscan_frame$task[i]="post_scan"
postscan_frame$pearson_R[i]=corr_postscan[1]
#also correlate freq judgement with post-scan lifetime (useful in determining whether to model them in the same GLM)
corr_freqpost=corr.test(as.numeric(data_freq.match$Response),as.numeric(data_postscan$Response),method="pearson")
freqpost_frame$SSID[i]=ss_list[i]
freqpost_frame$task[i]="freq_and_postscan"
freqpost_frame$pearson_R[i]=corr_freqpost[1]
#and the correlation between normfam and objective frequency
corr_normobjfreq=corr.test(as.numeric(data_postscan$objective_freq),as.numeric(data_postscan$norm_fam),method="pearson")
normobjfreq_frame$SSID[i]=ss_list[i]
normobjfreq_frame$task[i]="N/A"
normobjfreq_frame$pearson_R[i]=corr_normobjfreq[1]
#aaaaand the correlation between frequency response and normfam
corr_freqnorm=corr.test(as.numeric(data_freq$norm_fam),as.numeric(data_freq$Response),method="pearson")
freqnorm_frame$SSID[i]=ss_list[i]
freqnorm_frame$task[i]="freq"
freqnorm_frame$pearson_R[i]=corr_freqnorm[1]
#AAAAAAAND the correlation between postscan judgement and objective frequency (should be nonsignificant if they are doing the task)
corr_objfreqpostscan=corr.test(as.numeric(data_postscan$objective_freq),as.numeric(data_postscan$Response),method="pearson")
objfreqpostscan_frame$SSID[i]=ss_list[i]
objfreqpostscan_frame$task[i]="postscan"
objfreqpostscan_frame$pearson_R[i]=corr_objfreqpostscan[1]
}
View(freqRTavg)
freqRT.sum=freqRTavg %>%
group_by(resp,obj_freq) %>%
summarise(sub_mean_RT=mean(mean_RT),sub_sd=sd(mean_RT),sub_se=sd(mean_RT)/sqrt(n()))
freqRT.bar=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT, color=obj_freq))+geom_col()+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.bar
?summarise
?group_by
freqRT.sum=freqRTavg %>%
group_by(resp,obj_freq) %>%
summarise(sub_mean_RT=mean(mean_RT,na.rm=TRUE),sub_sd=sd(mean_RT,na.rm=TRUE),sub_se=sd(mean_RT,na.rm=TRUE)/sqrt(sum(!is.na(.))))
freqRT.bar=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT, color=obj_freq))+geom_col()+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.bar
View(freqRT.sum)
freqRT.sum=freqRTavg %>%
group_by(resp,obj_freq)
View(freqRT.sum)
pippp=freqRT.sum%>%summarise(count=sum(!is.na(.)))
View(pippp)
View(freqRT.sum)
pippp=freqRT.sum%>%summarise(count=n())
View(pippp)
pippp=freqRT.sum%>%summarise_all(count=sum(!is.na(.)))
pippp=freqRT.sum%>%summarise_all(funs(count=sum(!is.na(.)))
)
View(pippp)
pippp=freqRT.sum%>%summarise_all(list(~sum(!is.na(.)))
)
View(pippp)
freqRT.sum=freqRTavg %>%
group_by(resp,obj_freq) %>%
summarise(sub_mean_RT=mean(mean_RT,na.rm=TRUE),sub_sd=sd(mean_RT,na.rm=TRUE),sub_se=sd(mean_RT,na.rm=TRUE)/sqrt(sum(!is.na(.))))
View(pippp)
View(freqRTavg)
View(freqRT.sum)
View(pippp)
rm(pippp)
pippp=freqRT.sum%>%summarise_all(list(~sum(!is.na(.)))
)
View(pippp)
rm(pippp)
freqRT.sum=freqRTavg %>%
+   group_by(resp,obj_freq)
freqRT.sum=freqRTavg %>%
group_by(resp,obj_freq)
View(freqRT.sum)
pippp=freqRT.sum%>%summarise_all(list(~sum(!is.na(.))))
View(pippp)
pippp=freqRT.sum%>%summarise_all(list(~sd(mean_RT,na.rm=TRUE)/~sum(!is.na(.))))
View(freqRTavg)
View(freqRT.sum)
View(freqRTavg)
View(freqRT.sum)
View(pippp)
pippp=freqRT.sum%>%summarise_all(list(~sd(mean_RT,na.rm=TRUE)~/~sum(!is.na(.))))
pippp=freqRT.sum%>%summarise_all(list(~sd(mean_RT,na.rm=TRUE)/~sum(!is.na(.))))
pippp=freqRT.sum%>%summarise_all(list(sub_mean_RT= ~mean(mean_RT,na.rm=TRUE),sub_sd= ~sd(mean_RT,na.rm=TRUE),cnt_sqrt=~sqrt(sum(!is.na(.))),sub_se= sub_sd/cnt_sqrt ))
pippp=freqRT.sum%>%summarise_all(list(sub_mean_RT= ~mean(mean_RT,na.rm=TRUE),sub_sd= ~sd(mean_RT,na.rm=TRUE),cnt_sqrt=~sqrt(sum(!is.na(.)))))
View(pippp)
pippp=freqRT.sum%>%summarise_at(vars(mean_RT),list(sub_mean_RT= ~mean(mean_RT,na.rm=TRUE),sub_sd= ~sd(mean_RT,na.rm=TRUE),cnt_sqrt=~sqrt(sum(!is.na(.)))))
View(pippp)
freqRT.sum=freqRTavg %>%
group_by(resp,obj_freq) %>%
summarise_at(vars(mean_RT),list(sub_mean_RT= ~mean(mean_RT,na.rm=TRUE),sub_sd= ~sd(mean_RT,na.rm=TRUE),cnt_sqrt=~sqrt(sum(!is.na(.)))))
freqRT.sum$sub_se=freqRT.sum$sub_sd/freqRT.sum$cnt_sqrt
View(freqRT.sum)
freqRT.bar=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT, color=obj_freq))+geom_col()+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.bar
freqRT.bar=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+geom_col()+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.bar
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+geom_line(color=obj_freq)+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
glimpse(freqRT.sum)
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+geom_line(aes(color=obj_freq))+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.plt
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+geom_point(aes(color=obj_freq))+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.plt
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+geom_point()++facet_wrap(~obj_freq)+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
#summarise(sub_mean_RT=mean(mean_RT,na.rm=TRUE),sub_sd=sd(mean_RT,na.rm=TRUE),sub_se=sd(mean_RT,na.rm=TRUE)/sqrt(sum(!is.na(.))))
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+geom_point()+facet_wrap(~obj_freq)+geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.plt
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+
geom_point()+
facet_grid(~obj_freq)+
geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+
theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.plt
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+
geom_point()+
facet_grid(~obj_freq,labeller=labeller(obj_freq=obj.label))+
geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+
theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
obj.label=c("obj_freq:1","obj_freq:3","obj_freq:5","obj_freq:7","obj_freq:9")
names(obj.label)=c(1,3,5,7,9)
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+
geom_point()+
facet_grid(~obj_freq,labeller=labeller(obj_freq=obj.label))+
geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+
theme(axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.plt
freqRT.plt=ggplot(freqRT.sum,aes(x=resp,y=sub_mean_RT))+
geom_point()+
facet_grid(~obj_freq,labeller=labeller(obj_freq=obj.label))+
geom_errorbar(aes(ymin=sub_mean_RT-sub_se,ymax=sub_mean_RT+sub_se),width=0.2)+
theme(strip.text.x = element_text(size=12,face="bold"),axis.text=element_text(size=(15)),axis.title=element_text(size=(15)))
freqRT.plt
ggsave(filename='freqRT_plt.png',path=paste(datapath,'interim_summary\\',sep=''),plot=freqRT.plt,width=8,height=4,units="in",dpi=300,scale = 1)
